{"version":3,"sources":["components/panel.js","components/timeclock.js","components/timetable.js","components/activity.js","components/description.js","lib/storage.js","App.js","serviceWorker.js","index.js"],"names":["Panel","children","otherProps","className","CurrentNav","current","max","setCurrent","setMax","disabled","onClick","value","onChange","e","target","Current","timer","description","startTime","moment","format","TimeClock","active","setInactive","addActivity","useState","create","setCreate","setDescription","length","placeholder","timerDesc","createTimer","id","Activities","stopTime","start","stop","setStop","useEffect","setInterval","clearInterval","elapsed","duration","diff","humanize","TimeTable","ActivityGrid","activities","selectActivity","map","item","key","console","log","Description","getTimers","JSON","parse","sessionStorage","getItem","getActiveTimers","filter","stopTimer","timers","setItem","stringify","String","App","setTimers","setActive","updateTimers","forEach","idx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c70955d9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Panel ({ children, ...otherProps }) {\n  return (\n    <section className=\"Panel\" {...otherProps}>\n      {children}\n    </section>\n  )\n};\n\nexport default Panel;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport Panel from './panel';\n\nfunction TimeClock({ active, setInactive, addActivity, current, setCurrent }) {\n  const handleEnd = id => { // To stop a timer\n    if (active.length === 1) {\n      setCreate(true);\n    }\n    setMax(max - 1);\n    setInactive(id);\n  }; \n\n  const createTimer = () => { // To create a timer\n    const timerDesc = description;\n    setDescription(\"\");\n    setMax(max + 1);\n    addActivity(timerDesc);\n  };\n\n  const [create, setCreate] = useState(true); // Default to create\n  const [description, setDescription] = useState(\"\"); // For new timers\n  const [max, setMax] = useState(active.length - 1); // The total number of running timers\n  return (\n    <Panel>\n      <div className=\"Top-bar\">\n        <div\n          className={create ? \"Active\" : \"Inactive Left\"}\n          onClick={() => setCreate(true)}\n        >\n          Create new timer\n        </div>\n        <div\n          className={!create ? \"Active\": \"Inactive Right\"}\n          onClick={() => {\n            if(active.length > 0) {\n              setCreate(false)\n            }\n          }}\n        >\n          Examine existing timer\n        </div>\n      </div>\n      {create\n      ?\n        <div className=\"Create\">\n          <input\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            placeholder=\"Activity Description\"\n          />\n          <button onClick={() => createTimer()}>Start</button>\n        </div>\n      :\n        <>\n          <CurrentNav current={current} max={max} setCurrent={setCurrent} setMax={setMax} />\n          <div className=\"Current\">\n            <div className=\"Current-timer\">\n              <p>Description</p>\n              <p>Start Time</p>\n            </div>\n            <Current timer={active[current]} />\n            <button onClick={() => handleEnd(active[current].id)}>Stop</button>\n          </div>\n        </>\n      }\n    </Panel>\n  )\n};\n\nTimeClock.propTypes = {\n  active: PropTypes.array.isRequired,\n  setInactive: PropTypes.func.isRequired,\n  addActivity: PropTypes.func.isRequired,\n  current: PropTypes.number.isRequired,\n  setCurrent: PropTypes.func.isRequired\n};\n\nconst CurrentNav = ({ current, max, setCurrent, setMax }) => (\n  <div className=\"Active-nav\">\n    <button disabled={current <= 0} onClick={() => setCurrent(current - 1)}>\n      &lt;\n    </button>\n    <input\n      value={current + 1}\n      onChange={e => setCurrent(e.target.value)}\n    />\n    of\n    <input\n      value={max + 1}\n      onChange={e => setMax(e.target.value)}\n    />\n    <button disabled={current >= max} onClick={() => setCurrent(current + 1)}>\n      &gt;\n    </button>\n  </div>\n);\n\nCurrentNav.propTypes = {\n  current: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  setCurrent: PropTypes.func.isRequired,\n  setMax: PropTypes.func.isRequired\n};\n\nconst Current = ({ timer: { description, startTime } }) => (\n  <div className=\"Current-timer\">\n    <p>{description}</p>\n    <p>{new moment(startTime).format('MMM Do, h:mm:ss a')}</p>\n  </div>\n);\n\nCurrent.propTypes = {\n  timer: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    startTime: PropTypes.string.isRequired\n  })\n};\n\nexport default TimeClock;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nconst TimeTable = ({ children }) => {\n  return (\n    <div className=\"Time-table\">\n      <div>\n        <p>Description</p>\n        <p>Start time</p>\n        <p>End time</p>\n        <p>Duration</p>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nTimeTable.propTypes = {\n  children: PropTypes.any\n};\n\nexport const Activities = ({ timer: { description, startTime, stopTime }, ...otherProps }) => {\n  const start = new moment(startTime);\n  const [stop, setStop] = useState(new moment(stopTime) || '');\n\n  useEffect(() => {\n    let timer;\n    if (!stopTime) { //Update every second if it's not stopped\n      timer = setInterval(() => setStop(new moment()), 1000);\n    }\n    return () => clearInterval(timer);\n  })\n\n  let elapsed = moment.duration(start.diff(stop));\n\n\n  return (\n    <div className=\"Activity\" {...otherProps}>\n      <p>{description}</p>\n      <p>{start.format('MMM Do, h:mm:ss a')}</p>\n      <p>{stopTime && stop.format('MMM Do, h:mm:ss a')}</p>\n      <p>{elapsed.humanize()}</p>\n    </div>\n  );\n};\n\nActivities.propTypes = {\n  timer: PropTypes.shape({\n    description: PropTypes.string.isRequired,\n    startTime: PropTypes.string.isRequired,\n    stopTime: PropTypes.string\n  })\n};\n\nexport default TimeTable;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from './panel';\nimport TimeTable, { Activities } from './timetable';\n\nconst ActivityGrid = ({ activities, selectActivity }) => {\n  const handleClick = id => {\n    console.log(\"Click set\");\n    return () => {\n      console.log('Set clicked');\n      selectActivity(id);\n    }\n  };\n  return (\n      <Panel className=\"Lower Panel\">\n      <h2>Activities</h2>\n      <TimeTable>\n        {activities.map((item, key) => (\n          <Activities onClick={handleClick(item.id)} key={key} timer={item} />\n        ))}\n      </TimeTable>\n    </Panel>\n  );\n};\n\nActivityGrid.propTypes = {\n  activities: PropTypes.array.isRequired,\n  selectActivity: PropTypes.func.isRequired\n};\n\nexport default ActivityGrid;","import React from 'react';\nimport Panel from './panel';\n\nconst Description = () => (\n  <Panel>\n    <p className=\"Description\">\n      Time Tracker was originally a coding challenge. The company that issued the challenge \n      creates software for financial instutions, so I modeled the UI upon my own experience\n      working at a credit union. <br/>The software tellers interacted with was grey, which may \n      seem to reflect poor design, but the majority of the windows and components were rounded,\n      which I imagine represented a \"free spirit\" like nature.\n    </p>\n  </Panel>\n);\n\nexport default Description;","import moment from 'moment';\nconst TIMERS = \"TIMERS\";\n\nexport const getTimers = () => {\n  return JSON.parse(sessionStorage.getItem(TIMERS)) || [];\n};\n\nexport const getActiveTimers = () => {\n  return getTimers().filter(timer => !timer.stopTime);\n};\n\nexport const stopTimer = id => {\n  const stopTime = new moment();\n  let timers = getTimers();\n  timers = timers.map(timer => {\n    if (timer.id === id) {\n      return { ...timer, stopTime: stopTime.format() }; //Update timer\n    } else {\n      return timer;\n    }\n  });\n  sessionStorage.setItem(TIMERS, JSON.stringify(timers));\n};\n\nexport const createTimer = description => {\n  const startTime = new moment();\n  const timers = getTimers();\n  timers[timers.length] = { //Add a new timer\n    id: String(timers.length),\n    description,\n    startTime: startTime.format()\n  };\n  sessionStorage.setItem(TIMERS, JSON.stringify(timers));\n};","import React, { useState } from 'react';\nimport TimeClock from './components/timeclock';\nimport ActivityGrid from './components/activity';\nimport Description from './components/description';\nimport './App.css';\nimport { getTimers, getActiveTimers, stopTimer, createTimer } from './lib/storage';\n\n\nfunction App() {\n  const [timers, setTimers] = useState(getTimers());\n  const [active, setActive] = useState(getActiveTimers());\n  const [current, setCurrent] = useState(0);\n  const updateTimers = () => {\n    setTimers(getTimers());\n    setActive(getActiveTimers());\n  }\n  const newTimer = description => {\n    createTimer(description);\n    updateTimers();\n  };\n  const updateTimer = id => {\n    stopTimer(id);\n    updateTimers();\n  };\n\n  const handleCurrentChange = id => {\n    active.forEach((timer, idx) => {\n      if (timer.id === id) {\n        setCurrent(idx);\n      }\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Panel-holder\">\n        <TimeClock active={active} setInactive={updateTimer} addActivity={newTimer} current={current} setCurrent={setCurrent}/>\n        <ActivityGrid activities={timers} selectActivity={handleCurrentChange} />\n        <Description />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}